# -*- coding: utf-8 -*-
"""1_New_DA_Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FGuonhJ4iInGh90qXST9w5kJ3VSJhPo7
"""

from google.colab import files
uploaded = files.upload()

import pandas as pd

df = pd.read_csv('Employee_Attendance_Productivity.csv')
df

df.head()

df.tail()

df.dtypes

df.isnull()

df.duplicated()

df.drop_duplicates()

df.describe()

# Remove extraspace from Name column
df.Name = df.Name.str.strip()

# Remove extrapace from Weekday column
df.Weekday = df.Weekday.str.lstrip()

# Remove extrapace from Department column
df.Department = df.Department.str.strip()

# Remove extrapace from Department column
df.Gender = df.Gender.str.strip()

text_cols = ['Status', 'Department', 'LeaveType', 'RemoteWork']

for col in text_cols:
    df[col] = df[col].str.strip().str.title()

print(df.to_string())

df['Date'] = pd.to_datetime(df['Date'], format='%d-%m-%Y', errors='coerce')

df['CheckIn'] = pd.to_datetime(df['CheckIn'], format='%H:%M:%S', errors='coerce').dt.time
df['CheckOut'] = pd.to_datetime(df['CheckOut'], format='%H:%M:%S', errors='coerce').dt.time

df

df.duplicated().sum()  # To see if any complete duplicate rows exist

df.fillna({'LeaveType': 'Present'}, inplace=True)

df

"""**Analysis of Data from the dataset**"""

# 1. Employees with the Most Absences

absences = df[df['Status'] == 'Absent']
absent_counts = absences['Employee ID'].value_counts()
absent_counts.head()

# 2. Average Working Hours per Employee

avg_hours = df[df['Status'] == 'Present'].groupby('Employee ID')['HoursWorked'].mean()
avg_hours.head()

#  Average Hours Worked by Gender

df[df['Status'] == 'Present'].groupby('Gender')['HoursWorked'].mean()

#Total Absences by Gender

df[df['Status'] == 'Absent'].groupby('Gender').size()

# Average Productivity Score by Gender

df[df['Status'] == 'Present'].groupby('Gender')['ProductivityScore'].mean()

# Average Salary by Gender

df.groupby('Gender')['Salary'].mean()

# Gender-wise Summary Report

gender_summary = df.groupby('Gender').agg(
    Total_Records=('Status', 'count'),
    Total_Absent=('Status', lambda x: (x == 'Absent').sum()),
    Total_Present=('Status', lambda x: (x == 'Present').sum()),
    Avg_Hours=('HoursWorked', 'mean'),
    Avg_Productivity=('ProductivityScore', 'mean')
)
print(gender_summary)

#  1. Bar Chart – Average Hours Worked by Gender

import seaborn as sns
import matplotlib.pyplot as plt
avg_hours = df[df['Status'] == 'Present'].groupby('Gender')['HoursWorked'].mean().reset_index()
plt.figure(figsize=(5,5))
sns.barplot(data=avg_hours, x='Gender', y='HoursWorked',palette='Set1')
plt.title('Average Hours Worked by Gender')
plt.ylabel('Avg Hours Worked')
plt.show()

# 2. Countplot – Total Absences by Gender

absent = df[df['Status'] == 'Absent']
plt.figure(figsize=(5,5))
sns.countplot(data=absent, x='Gender', palette='pastel')
plt.title('Total Absences by Gender')
plt.xlabel('Gender')
plt.ylabel('Number of Absences')
plt.show()

# 3. Bar Chart – Average Productivity Score by Gender

avg_productivity = df[df['Status'] == 'Present'].groupby('Gender')['ProductivityScore'].mean().reset_index()
plt.figure(figsize=(5,5))
sns.barplot(data=avg_productivity, x='Gender', y='ProductivityScore', palette='Set1')
plt.title('Average Productivity Score by Gender')
plt.ylabel('Avg Productivity Score')
plt.show()

# 4. Boxplot – Distribution of Hours Worked by Gender

sns.boxplot(data=df[df['Status'] == 'Present'], x='Gender', y='HoursWorked', palette='dark')
plt.title('Hours Worked Distribution by Gender')
plt.figure(figsize=(5,5))
plt.show()

# 5. Pie Chart – Gender Distribution in Dataset

gender_counts = df['Gender'].value_counts()
plt.figure(figsize=(5,5))
plt.pie(gender_counts, labels=gender_counts.index, autopct='%1.1f%%', startangle=90, colors=sns.color_palette('pastel'))
plt.title('Gender Distribution')
plt.axis('equal')
plt.show()

# 6. Clustered Bar Chart – Absences by Gender and Department

absences = df[df['Status'] == 'Absent'].groupby(['Department', 'Gender']).size().reset_index(name='Absence_Count')

plt.figure(figsize=(8,6))
sns.barplot(data=absences, x='Department', y='Absence_Count', hue='Gender', palette='pastel')
plt.title('Total Absences by Gender & Department')
plt.xticks(rotation=45)
plt.show()

# 7.Bar Plot – Average Productivity Score by Department


avg_prod = df[df['Status'] == 'Present'].groupby('Department')['ProductivityScore'].mean().reset_index()

plt.figure(figsize=(6, 6))
ax = sns.barplot(data=avg_prod, x='Department', y='ProductivityScore', palette='viridis')

for container in ax.containers:
    ax.bar_label(container, fmt='%.2f', label_type='edge', padding=3)

plt.title('Average Productivity Score by Department')
plt.ylabel('Avg Productivity Score')
plt.xlabel('Department')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# 8. Pie chart: Attendance Status Distribution
plt.figure(figsize=(5,5))
status_counts = df['Status'].value_counts()
colors = sns.color_palette('pastel')
plt.pie(status_counts, labels=status_counts.index, autopct='%1.1f%%', startangle=140, colors=colors)
plt.title('Employee Attendance Status Distribution')
plt.tight_layout()
plt.show()

# 9. Box Plot: Hours Worked by Department
plt.figure(figsize=(5,5))
sns.boxplot(x='Department', y='HoursWorked', data=df, palette='Set3')
plt.title('Hours Worked by Department')
plt.xlabel('Department')
plt.ylabel('Hours Worked')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Save as any name you like
df.to_csv('Employee_Attendance_Productivity_cleaned.csv', index=False)

# Download using the same file name
files.download('Employee_Attendance_Productivity_cleaned.csv')